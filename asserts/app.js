angular.module("app",["ngRoute"]),angular.module("app").controller("applicationController",["$scope",function(e){e.$on("login",function(t,o){e.currentUser=o.data,console.log(o)})}]),angular.module("app").controller("loginController",["$scope","userService",function(e,t){e.login=function(o,n){t.login(o,n).then(function(t){e.$emit("login",t)})}}]),angular.module("app").controller("postsController",["$scope","postsService",function(e,t){e.addPost=function(){e.postBody&&t.create({username:"routine",body:e.postBody}).success(function(t){e.posts.unshift(t),e.postBody=null})},t.fetch().success(function(t){e.posts=t})}]),angular.module("app").service("postsService",["$http",function(e){this.fetch=function(){return e.get("/api/posts")},this.create=function(t){return e.post("/api/posts",t)}}]),angular.module("app").controller("registerController",["$scope","userService","$location",function(e,t,o){e.register=function(n,r){t.register(n,r).then(function(t){e.$emit("login",t),o.path("/")})}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"postsController",templateUrl:"/templates/posts.html"}).when("/register",{controller:"registerController",templateUrl:"/templates/register.html"}).when("/login",{controller:"loginController",templateUrl:"/templates/login.html"})}]),angular.module("app").service("userService",["$http",function(e){var t=this;t.getUser=function(){return e.get("/api/users",{headers:{"x-auth":this.token}})},t.login=function(o,n){return e.post("/api/sessions",{username:o,password:n}).then(function(o){return t.token=o.data,e.defaults.headers.common["x-auth"]=o.data,t.getUser()})},t.register=function(o,n){return e.post("/api/users",{username:o,password:n}).then(function(){return t.login(o,n)})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uQ29udHJvbGxlci5qcyIsImxvZ2luLmNvbnRyb2xsZXIuanMiLCJwb3N0LmNvbnRyb2xsZXIuanMiLCJwb3N0LnNlcnZpY2UuanMiLCJyZWdpc3Rlci5jb250cm9sbGVyLmpzIiwicm91dGVzLmpzIiwidXNlci5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwidXNlclNlcnZpY2UiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwiJGVtaXQiLCJwb3N0c1NlcnZpY2UiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5Iiwic3VjY2VzcyIsInBvc3QiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCIkbG9jYXRpb24iLCJyZWdpc3RlciIsInBhdGgiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImdldFVzZXIiLCJoZWFkZXJzIiwieC1hdXRoIiwidG9rZW4iLCJ2YWwiLCJkZWZhdWx0cyIsImNvbW1vbiJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQVFDLE9BQU8sT0FBUyxZQ0F4QkQsUUFBUUMsT0FBTyxPQUFPQyxXQUFXLHlCQUFBLFNBQXlCLFNBQVNDLEdBQy9EQSxFQUFPQyxJQUFJLFFBQVMsU0FBU0MsRUFBR0MsR0FDNUJILEVBQU9JLFlBQWNELEVBQUtFLEtBQzFCQyxRQUFRQyxJQUFJSixRQ0hwQk4sUUFBUUMsT0FBTyxPQUFPQyxXQUFXLG1CQUFBLFNBQUEsY0FBbUIsU0FBU0MsRUFBUVEsR0FDakVSLEVBQU9TLE1BQVEsU0FBU0MsRUFBVUMsR0FDOUJILEVBQVlDLE1BQU1DLEVBQVVDLEdBQ3ZCQyxLQUFLLFNBQVNULEdBQ1hILEVBQU9hLE1BQU0sUUFBU1YsU0NKdENOLFFBQVFDLE9BQU8sT0FBT0MsV0FBVyxtQkFBQSxTQUFBLGVBQW1CLFNBQVNDLEVBQVFjLEdBQ2pFZCxFQUFPZSxRQUFVLFdBQ1ZmLEVBQU9nQixVQUNORixFQUFhRyxRQUNUUCxTQUFVLFVBQ1ZRLEtBQU1sQixFQUFPZ0IsV0FDZEcsUUFBUSxTQUFTQyxHQUNoQnBCLEVBQU9xQixNQUFNQyxRQUFRRixHQUNyQnBCLEVBQU9nQixTQUFXLFFBSzlCRixFQUFhUyxRQUFRSixRQUFRLFNBQVNFLEdBQ2xDckIsRUFBT3FCLE1BQVFBLE9DZHZCeEIsUUFBUUMsT0FBTyxPQUFPMEIsUUFBUSxnQkFBQSxRQUFnQixTQUFTQyxHQUNuREMsS0FBS0gsTUFBUSxXQUNULE1BQU9FLEdBQU1FLElBQUksZUFFckJELEtBQUtULE9BQVMsU0FBU0csR0FDbkIsTUFBT0ssR0FBTUwsS0FBSyxhQUFjQSxPQ0x4Q3ZCLFFBQVFDLE9BQU8sT0FBT0MsV0FBVyxzQkFBQSxTQUFBLGNBQUEsWUFBc0IsU0FBVUMsRUFBUVEsRUFBYW9CLEdBQ2xGNUIsRUFBTzZCLFNBQVcsU0FBVW5CLEVBQVVDLEdBQ2xDSCxFQUFZcUIsU0FBU25CLEVBQVVDLEdBQzFCQyxLQUFLLFNBQVVULEdBQ1JILEVBQU9hLE1BQU0sUUFBU1YsR0FDdEJ5QixFQUFVRSxLQUFLLFdDTG5DakMsUUFBUUMsT0FBTyxPQUFPaUMsUUFBQSxpQkFBTyxTQUFTQyxHQUNsQ0EsRUFDS0MsS0FBSyxLQUNGbEMsV0FBWSxrQkFDWm1DLFlBQWEsMEJBRWhCRCxLQUFLLGFBQ0ZsQyxXQUFZLHFCQUNabUMsWUFBYSw2QkFFaEJELEtBQUssVUFDRmxDLFdBQVksa0JBQ1ptQyxZQUFhLDZCQ1p6QnJDLFFBQVFDLE9BQU8sT0FBTzBCLFFBQVEsZUFBQSxRQUFlLFNBQVNDLEdBQ2xELEdBQUlELEdBQVVFLElBQ2RGLEdBQVFXLFFBQVUsV0FDZCxNQUFPVixHQUFNRSxJQUFJLGNBQ2JTLFNBQVdDLFNBQVVYLEtBQUtZLFVBR2xDZCxFQUFRZixNQUFRLFNBQVNDLEVBQVVDLEdBQy9CLE1BQU9jLEdBQU1MLEtBQUssaUJBQ2RWLFNBQVVBLEVBQ1ZDLFNBQVVBLElBQ1hDLEtBQUssU0FBUzJCLEdBR2IsTUFGQWYsR0FBUWMsTUFBUUMsRUFBSWxDLEtBQ3BCb0IsRUFBTWUsU0FBU0osUUFBUUssT0FBTyxVQUFZRixFQUFJbEMsS0FDdkNtQixFQUFRVyxhQUd2QlgsRUFBUUssU0FBVyxTQUFVbkIsRUFBVUMsR0FDbkMsTUFBT2MsR0FBTUwsS0FBSyxjQUNkVixTQUFVQSxFQUFVQyxTQUFVQSxJQUMvQkMsS0FBSyxXQUNKLE1BQU9ZLEdBQVFmLE1BQU1DLEVBQVVDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbICduZ1JvdXRlJyBdKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdhcHBsaWNhdGlvbkNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAkc2NvcGUuJG9uKCdsb2dpbicsIGZ1bmN0aW9uKF8sIHVzZXIpIHtcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlci5kYXRhO1xuICAgICAgICBjb25zb2xlLmxvZyh1c2VyKTtcbiAgICB9KVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdsb2dpbkNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsIHVzZXJTZXJ2aWNlKSB7XG4gICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgIHVzZXJTZXJ2aWNlLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcik7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xufSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcigncG9zdHNDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCBwb3N0c1NlcnZpY2UpIHtcbiAgICAkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZigkc2NvcGUucG9zdEJvZHkpIHtcbiAgICAgICAgICAgIHBvc3RzU2VydmljZS5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAncm91dGluZScsXG4gICAgICAgICAgICAgICAgYm9keTogJHNjb3BlLnBvc3RCb2R5XG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKHBvc3QpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgcG9zdHNTZXJ2aWNlLmZldGNoKCkuc3VjY2VzcyhmdW5jdGlvbihwb3N0cykge1xuICAgICAgICAkc2NvcGUucG9zdHMgPSBwb3N0cztcbiAgICB9KTtcbn0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpLnNlcnZpY2UoJ3Bvc3RzU2VydmljZScsIGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XG4gICAgfTtcbiAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvc3QpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLCBwb3N0KTtcbiAgICB9O1xufSk7XG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdyZWdpc3RlckNvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHNjb3BlLCB1c2VyU2VydmljZSwgJGxvY2F0aW9uKSB7XG4gICAgJHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICB1c2VyU2VydmljZS5yZWdpc3Rlcih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcilcbiAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgLndoZW4oJy8nLCB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAncG9zdHNDb250cm9sbGVyJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9wb3N0cy5odG1sJ1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL3JlZ2lzdGVyJywge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ3JlZ2lzdGVyQ29udHJvbGxlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy90ZW1wbGF0ZXMvcmVnaXN0ZXIuaHRtbCdcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9sb2dpbicsIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdsb2dpbkNvbnRyb2xsZXInLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdGVtcGxhdGVzL2xvZ2luLmh0bWwnXG4gICAgICAgIH0pO1xufSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJykuc2VydmljZSgndXNlclNlcnZpY2UnLCBmdW5jdGlvbigkaHR0cCkge1xuICAgIHZhciBzZXJ2aWNlID0gdGhpcztcbiAgICBzZXJ2aWNlLmdldFVzZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ3gtYXV0aCc6IHRoaXMudG9rZW4gfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHNlcnZpY2UubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLCB7XG4gICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXG4gICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgIHNlcnZpY2UudG9rZW4gPSB2YWwuZGF0YTtcbiAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWyd4LWF1dGgnXSA9IHZhbC5kYXRhO1xuICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuZ2V0VXNlcigpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHNlcnZpY2UucmVnaXN0ZXIgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VydmljZS5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=